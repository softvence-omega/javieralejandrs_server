model Blog {
  id                String    @id @default(uuid())
  title             String
  blogThumbnail     String?
  authorId          String
  shortInto         String?
  themes            String?
  decor_entertainment String?
  conclusion        String?
  readTime          String?
  likeCount         Int       @default(0)
  commentCount      Int       @default(0)
  viewCount         Int       @default(0)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Relations
  author            User      @relation(fields: [authorId], references: [id])
  likes             Like[]
  comments          Comment[]
  views             View[]
}

model Like {
  id        String   @id @default(uuid())
  userId    String
  blogId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id])
  blog      Blog     @relation(fields: [blogId], references: [id])

  @@unique([userId, blogId]) // Prevent duplicate likes from same user on same blog
}

model Comment {
  id        String   @id @default(uuid())
  content   String
  userId    String
  blogId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id])
  blog      Blog     @relation(fields: [blogId], references: [id])
}

model View {
  id        String   @id @default(uuid())
  userId    String
  blogId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User     @relation(fields: [userId], references: [id])
  blog      Blog     @relation(fields: [blogId], references: [id])
}
